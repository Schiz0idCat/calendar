/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package ui.GUI;

import javax.swing.JOptionPane;
import modules.calendar.Event;
import modules.people.People;
import modules.people.Person;
import config.Config;
import config.modules.CalendarConfig;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import java.awt.Dimension;

/**
 *
 * @author Felipe Márquez
 */
public class EventDialog extends javax.swing.JDialog {

    private Event event;
    private People people;
    private boolean isEditMode;
    private boolean confirmed = false;
    private static final CalendarConfig config = Config.load().getCalendar();
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(config.getDateFormat());
    private DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(config.getTimeFormat());

    /**
     * Creates new form EventDialog
     */
    public EventDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.event = new Event();
        this.people = new People();
        this.isEditMode = false;
        setupDialog();
    }
    
    /**
     * Creates new form EventDialog for adding new event with existing people
     */
    public EventDialog(java.awt.Frame parent, boolean modal, People people) {
        super(parent, modal);
        initComponents();
        this.event = new Event();
        this.people = people;
        this.isEditMode = false;
        setupDialog();
    }
    
    /**
     * Creates new form EventDialog for editing existing event
     */
    public EventDialog(java.awt.Frame parent, boolean modal, Event event, People people) {
        super(parent, modal);
        initComponents();
        this.event = event;
        this.people = people;
        this.isEditMode = true;
        setupDialog();
        populateFields();
    }
    
    /**
     * Setup dialog components
     */
    private void setupDialog() {
        setTitle(isEditMode ? "Edit Event" : "Add New Event");
        if (!(jList1.getModel() instanceof DefaultListModel)) {
        jList1.setModel(new DefaultListModel<String>());
        }
        // Estabilizar tamaño y celdas para que GridBagLayout no reacomode los textfields
        jList1.setVisibleRowCount(5);
        jList1.setFixedCellHeight(20);
        jList1.setFixedCellWidth(280);
        jScrollPane2.setPreferredSize(new Dimension(312, 120));
        
        // Populate people combo box
        updatePeopleComboBox();
       
        // Update participant list
        updateParticipantList();
    }
    
    /**
     * Populate fields with existing event data
     */
    private void populateFields() {
        if (event != null) {
            jTextField2.setText(event.getTitle());
            jTextField1.setText(event.fmtDate(config.getDateFormat()));
            jTextField3.setText(event.fmtStartTime(config.getTimeFormat()));
            jTextField4.setText(event.fmtEndTime(config.getTimeFormat()));
            allDayCheckbox.setSelected(event.getIsAllDay());
            jTextField5.setText(event.getLocation());
            jTextArea1.setText(event.getDescription());
            updateParticipantList();
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        allDayCheckbox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        addParticipant = new javax.swing.JButton();
        removeParticipant = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Title:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(80, 60, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Date (dd-mm-aaaa):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 60, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Start Time (hh:mm):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 60, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("End Time (hh:mm):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 60, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        jLabel6.setText("Location:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 60, 0, 0);
        getContentPane().add(jLabel6, gridBagConstraints);

        jLabel7.setText("Description:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(24, 60, 0, 0);
        getContentPane().add(jLabel7, gridBagConstraints);

        jLabel8.setText("Participants:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 60, 0, 0);
        getContentPane().add(jLabel8, gridBagConstraints);

        allDayCheckbox.setText("All Day Event");
        allDayCheckbox.setName("allDayCheckbox"); // NOI18N
        allDayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allDayCheckboxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 60, 0, 0);
        getContentPane().add(allDayCheckbox, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("desccriptionArea"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 312;
        gridBagConstraints.ipady = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(24, 43, 0, 51);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jTextField1.setName("dateField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 264;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 43, 0, 51);
        getContentPane().add(jTextField1, gridBagConstraints);

        jTextField2.setName("titleField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 264;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(77, 43, 0, 51);
        getContentPane().add(jTextField2, gridBagConstraints);

        jTextField3.setName("startTimeField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 264;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 43, 0, 51);
        getContentPane().add(jTextField3, gridBagConstraints);

        jTextField4.setName("endTimeField"); // NOI18N
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 264;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 43, 0, 51);
        getContentPane().add(jTextField4, gridBagConstraints);

        jTextField5.setName("locationField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 264;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 43, 0, 51);
        getContentPane().add(jTextField5, gridBagConstraints);

        okButton.setText("OK");
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(90, 9, 26, 0);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(90, 120, 26, 0);
        getContentPane().add(cancelButton, gridBagConstraints);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 312;
        gridBagConstraints.ipady = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(25, 43, 0, 51);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 95;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 43, 0, 0);
        getContentPane().add(jComboBox1, gridBagConstraints);

        addParticipant.setText("Add");
        addParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParticipantActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
        getContentPane().add(addParticipant, gridBagConstraints);

        removeParticipant.setText("Remove");
        removeParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeParticipantActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 51);
        getContentPane().add(removeParticipant, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void allDayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allDayCheckboxActionPerformed
        boolean isAllDay = allDayCheckbox.isSelected();
        jTextField3.setEnabled(!isAllDay);
        jTextField4.setEnabled(!isAllDay);
        
        if (isAllDay) {
            jTextField3.setText("00:00");
            jTextField4.setText("23:59");
        }
    }//GEN-LAST:event_allDayCheckboxActionPerformed

    private void addParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParticipantActionPerformed
        String selectedPerson = (String) jComboBox1.getSelectedItem();
        if (selectedPerson == null || selectedPerson.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a person to add.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Extract RUT from the display string (format: "Name (RUT)")
        String rut = selectedPerson.substring(selectedPerson.lastIndexOf("(") + 1, selectedPerson.lastIndexOf(")"));
        Person person = people.get(rut);
        
        if (person != null) {
            try {
                event.addParticipant(person);
                updateParticipantList();
                updatePeopleComboBox(); // Remove added person from combo box
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error adding participant: " + e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addParticipantActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            // Validate and set event data
            if (!validateAndSetEventData()) {
                return;
            }
            
            confirmed = true;
            // Close dialog
            dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving event: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void removeParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeParticipantActionPerformed
        int selectedIndex = jList1.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a participant to remove.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String selectedParticipant = jList1.getSelectedValue();
        // Extract RUT from the display string
        String rut = selectedParticipant.substring(selectedParticipant.lastIndexOf("(") + 1, selectedParticipant.lastIndexOf(")"));
        
        event.removeParticipant(rut);
        updateParticipantList();
        updatePeopleComboBox(); // Add removed person back to combo box
    }//GEN-LAST:event_removeParticipantActionPerformed
    
    private boolean validateAndSetEventData() {
        try {
            // Validate title
            String title = jTextField2.getText().trim();
            if (title.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Title cannot be empty.", 
                    "Validation Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            event.setTitle(title);
            
            // Validate date
            String dateStr = jTextField1.getText().trim();
            if (dateStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Date cannot be empty.", 
                    "Validation Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            LocalDate date = LocalDate.parse(dateStr, dateFormatter);
            event.setDate(date);
            
            // Validate times
            boolean isAllDay = allDayCheckbox.isSelected();
            if (!isAllDay) {
                String startTimeStr = jTextField3.getText().trim();
                String endTimeStr = jTextField4.getText().trim();
                
                if (startTimeStr.isEmpty() || endTimeStr.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Start and end times are required for non-all-day events.", 
                        "Validation Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                
                LocalTime startTime = LocalTime.parse(startTimeStr, timeFormatter);
                LocalTime endTime = LocalTime.parse(endTimeStr, timeFormatter);
                
                event.setStartTime(startTime);
                event.setEndTime(endTime);
            } else {
                event.setIsAllDay(true);
            }
            
            // Set location and description
            event.setLocation(jTextField5.getText().trim());
            event.setDescription(jTextArea1.getText().trim());
            
            return true;
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date/time format. Use: " + 
                config.getDateFormat() + " for dates and " + config.getTimeFormat() + " for times.", 
                "Format Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Validation error: " + e.getMessage(), 
                "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    private void updatePeopleComboBox() {
        jComboBox1.removeAllItems();
        
        for (Person person : people.getPeople().values()) {
            // Only add people who are not already participants
            if (!event.getParticipants().containsKey(person.getRut())) {
                jComboBox1.addItem(person.getName() + " (" + person.getRut() + ")");
            }
        }
    }
    
    private void updateParticipantList() {
    DefaultListModel<String> model = (DefaultListModel<String>) jList1.getModel();
    model.clear();

    for (Person person : event.getParticipants().values()) {
        model.addElement(person.getName() + " (" + person.getRut() + ")");
    }

    // Ajustes visuales para mantener layout estable
    int rows = Math.max(1, Math.min(8, model.getSize()));
    jList1.setVisibleRowCount(rows);
    jScrollPane2.setPreferredSize(new Dimension(312, rows * 20 + 10));

    jScrollPane2.revalidate();
    jScrollPane2.repaint();
    jList1.revalidate();
    jList1.repaint();
    getContentPane().revalidate();
    getContentPane().repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EventDialog dialog = new EventDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

     /**
     * Get the event (for use by parent components)
     */
    public Event getEvent() {
        return confirmed ? event : null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParticipant;
    private javax.swing.JCheckBox allDayCheckbox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeParticipant;
    // End of variables declaration//GEN-END:variables
}
