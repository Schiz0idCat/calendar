/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.GUI;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import modules.calendar.Calendar;
import modules.calendar.Event;
import modules.people.People;
import modules.people.Person;
import disk.modules.CSVCalendar;
import disk.modules.CSVPeople;
import config.Config;
import config.modules.CalendarConfig;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Map;
/**
 *
 * @author Felipe MÃ¡rquez
 */
public class CalendarPanel extends javax.swing.JPanel {

    private Calendar calendar;
    private People people;
    private CSVCalendar csvCalendar;
    private CSVPeople csvPeople;
    private static final CalendarConfig config = Config.load().getCalendar();
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(config.getDateFormat());
    /**
     * Creates new form CalendarPanel
     */
    public CalendarPanel() {
        initComponents();
        initializeData();
    }
    
    /**
     * Inject shared data models so this panel uses the same instances
     * as the rest of the application. Call this right after constructing
     * the panel.
     */
    public void setData(Calendar calendar, People people, CSVCalendar csvCalendar, CSVPeople csvPeople) {
        this.calendar = calendar;
        this.people = people;
        this.csvCalendar = csvCalendar;
        this.csvPeople = csvPeople;
        refreshEventTable();
    }
    
    /**
     * Initialize data sources
     */
    private void initializeData() {
        try {
            // If data was not injected, load defaults
            if (this.people == null || this.csvPeople == null) {
                csvPeople = new CSVPeople("calendar");
                people = csvPeople.load();
            }

            if (this.calendar == null || this.csvCalendar == null) {
                csvCalendar = new CSVCalendar("calendar", people);
                calendar = csvCalendar.load();
            }
            refreshEventTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        searchTypeCombo = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Search:");

        searchField.setName("searchField"); // NOI18N
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by Date", "Search by Title" }));
        searchTypeCombo.setName("searchTypeCombo"); // NOI18N
        searchTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeComboActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.setName("searchButton"); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addContainerGap(210, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(refreshButton))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        addButton.setText("Add Event");
        addButton.setName("addButton"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit Event");
        editButton.setName("editButton"); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Event");
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(editButton)
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addContainerGap(487, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addGap(39, 39, 39))
        );

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        eventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title", "Date", "Start Time", "End Time", "All Day", "Location", "Description", "Participants"
            }
        ));
        eventTable.setName("eventTable"); // NOI18N
        jScrollPane1.setViewportView(eventTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Get the parent frame (the main window)
        java.awt.Frame parentFrame = (java.awt.Frame) SwingUtilities.getWindowAncestor(this);
        
        // Create the dialog with the correct parent and pass people
        EventDialog dialog = new EventDialog(parentFrame, true, people);
        dialog.setVisible(true);
        
        // Get the created event and add it to calendar
        Event newEvent = dialog.getEvent();
        if (newEvent != null && newEvent.getTitle() != null && !newEvent.getTitle().equals("default title")) {
            try {
                if (calendar.add(newEvent)) {
                    saveCalendar();
                    refreshEventTable();
                    JOptionPane.showMessageDialog(this, "Event added successfully.", 
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Event could not be added due to conflicts with existing events.", 
                        "Add Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error adding event: " + e.getMessage(), 
                    "Add Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshEventTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchText = searchField.getText().trim();
        if (searchText.isEmpty()) {
            // Show all events
            refreshEventTable();
            return;
        }

        // Get search type from combo box
        String searchType = (String) searchTypeCombo.getSelectedItem();

        if (searchType.equals("Search by Title")) {
            // Search by title
            searchEventsByTitle(searchText);
        } else {
            // Search by date
            searchEventsByDate(searchText);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTypeComboActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedRow = eventTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an event to edit.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the selected event
        String title = (String) eventTable.getValueAt(selectedRow, 0);
        String dateStr = (String) eventTable.getValueAt(selectedRow, 1);
        
        try {
            LocalDate date = LocalDate.parse(dateStr, dateFormatter);
            List<Event> events = calendar.searchByDate(date);
            Event selectedEvent = null;
            
            // Find the exact event by title and date
            for (Event event : events) {
                if (event.getTitle().equals(title) && event.getDate().equals(date)) {
                    selectedEvent = event;
                    break;
                }
            }
            
            if (selectedEvent != null) {
                // Open edit dialog
                java.awt.Frame parentFrame = (java.awt.Frame) SwingUtilities.getWindowAncestor(this);
                EventDialog dialog = new EventDialog(parentFrame, true, selectedEvent, people);
                dialog.setVisible(true);
                
                // Refresh table after editing
                refreshEventTable();
                saveCalendar();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error editing event: " + e.getMessage(), 
                "Edit Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = eventTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an event to delete.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the selected event
        String title = (String) eventTable.getValueAt(selectedRow, 0);
        String dateStr = (String) eventTable.getValueAt(selectedRow, 1);
        
        try {
            LocalDate date = LocalDate.parse(dateStr, dateFormatter);
            List<Event> events = calendar.searchByDate(date);
            Event selectedEvent = null;
            
            // Find the exact event by title and date
            for (Event event : events) {
                if (event.getTitle().equals(title) && event.getDate().equals(date)) {
                    selectedEvent = event;
                    break;
                }
            }
            
            if (selectedEvent != null) {
                int result = JOptionPane.showConfirmDialog(this, 
                    "Are you sure you want to delete this event?\n\n" + selectedEvent.toString(),
                    "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
                if (result == JOptionPane.YES_OPTION) {
                    calendar.remove(selectedEvent);
                    saveCalendar();
                    refreshEventTable();
                    JOptionPane.showMessageDialog(this, "Event deleted successfully.", 
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting event: " + e.getMessage(), 
                "Delete Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    private void searchEventsByTitle(String keyword) {
        try {
            List<Event> events = calendar.searchByTitle(keyword);
            updateEventTable(events);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error searching events: " + e.getMessage(), 
                "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Search by date method
    private void searchEventsByDate(String dateStr) {
        try {
            LocalDate date = LocalDate.parse(dateStr, dateFormatter);
            List<Event> events = calendar.searchByDate(date);
            updateEventTable(events);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use: " + config.getDateFormat(), 
                "Date Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error searching events: " + e.getMessage(), 
                "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Refresh table method
    private void refreshEventTable() {
        if (calendar != null) {
            List<Event> allEvents = calendar.getAllEvents();
            updateEventTable(allEvents);
        }
    }

    // Update the event table with the given list of events
    private void updateEventTable(List<Event> events) {
        DefaultTableModel model = (DefaultTableModel) eventTable.getModel();
        model.setRowCount(0); // Clear existing data
        
        for (Event event : events) {
            Object[] row = {
                event.getTitle(),
                event.fmtDate(config.getDateFormat()),
                event.fmtStartTime(config.getTimeFormat()),
                event.fmtEndTime(config.getTimeFormat()),
                event.getIsAllDay() ? "Yes" : "No",
                event.getLocation(),
                event.getDescription(),
                getParticipantsString(event.getParticipants())
            };
            model.addRow(row);
        }
    }

    // Get participants as a comma-separated string
    private String getParticipantsString(Map<String, Person> participants) {
        if (participants.isEmpty()) {
            return "";
        }
        
        StringBuilder sb = new StringBuilder();
        for (Person person : participants.values()) {
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(person.getName());
        }
        return sb.toString();
    }
    
    // Save calendar data
    private void saveCalendar() {
        try {
            if (csvCalendar != null && calendar != null) {
                csvCalendar.save(calendar);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving calendar: " + e.getMessage(), 
                "Save Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTable eventTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> searchTypeCombo;
    // End of variables declaration//GEN-END:variables
}
